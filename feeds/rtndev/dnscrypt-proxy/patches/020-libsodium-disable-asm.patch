--- ./src/libsodium/configure.ac.orig	2013-04-23 00:20:37.000000000 +0400
+++ ./src/libsodium/configure.ac	2013-05-09 18:05:40.132933829 +0400
@@ -144,6 +144,20 @@
   LDFLAGS="$LDFLAGS -L/usr/local/lib"
 ])
 
+AC_MSG_CHECKING(for access to floating-point rounding mode)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+  #include <fenv.h>
+  #pragma STDC FENV_ACCESS ON
+]], [[
+  const int previous_rounding_mode = fegetround();
+  fesetround(FE_TONEAREST);
+  fesetround(previous_rounding_mode);
+]])],
+[AC_MSG_RESULT(yes)
+ AC_DEFINE([HAVE_FENV_H], [1], [floating-point rounding mode is accessible])
+],
+[AC_MSG_RESULT(no)])
+
 dnl Checks for typedefs, structures, and compiler characteristics.
 
 AC_C_BIGENDIAN(
@@ -187,6 +201,19 @@
 [AS_HELP_STRING(--enable-pie,Produce position independent executables @<:@default=yes@:>@)],
  enable_pie=$enableval, enable_pie="maybe")
 
+AC_ARG_ENABLE(asm,
+[AS_HELP_STRING(--disable-asm,Disable assembly implementations)],
+[
+  AS_IF([test "x$enableval" = "xno"], [
+    enable_asm="no"
+  ], [
+    enable_asm="yes"
+  ])
+],
+[
+  enable_asm="yes"
+])
+
 AC_ARG_ENABLE(ssp,
 [AS_HELP_STRING(--disable-ssp,Don't compile with -fstack-protector)],
 [AS_IF([test "x$enableval" = "xno"], [
--- ./src/libsodium/src/libsodium/crypto_onetimeauth/poly1305/53/auth_poly1305_53.c.orig	2013-04-22 21:54:56.000000000 +0400
+++ ./src/libsodium/src/libsodium/crypto_onetimeauth/poly1305/53/auth_poly1305_53.c	2013-05-09 18:05:40.132933829 +0400
@@ -4,14 +4,18 @@
 Public domain.
 */
 
-#include <fenv.h>
+#ifdef HAVE_FENV_H
+# include <fenv.h>
+#endif
 #include <stdint.h>
 #include <stdlib.h>
 
 #include "api.h"
 #include "crypto_onetimeauth_poly1305_53.h"
 
-#pragma STDC FENV_ACCESS ON
+#ifdef HAVE_FENV_H
+# pragma STDC FENV_ACCESS ON
+#endif
 
 typedef uint8_t  uchar;
 typedef int32_t  int32;
@@ -237,12 +241,14 @@
   register uint64 g3;
   register uint64 g4;
 
+#ifdef HAVE_FENV_H
   const int previous_rounding_mode = fegetround();
   if (previous_rounding_mode != FE_TONEAREST) {
       if (fesetround(FE_TONEAREST) != 0) {
           return -1;
       }
   }
+#endif
 
   r00 = *(uchar *) (r + 0);
   constants = (char *) &poly1305_53_constants;
@@ -1626,10 +1632,13 @@
   f3 >>= 8;
   *(uchar *) (out + 15) = f3;
 
+#ifdef HAVE_FENV_H
   if (previous_rounding_mode != FE_TONEAREST &&
       fesetround(previous_rounding_mode) != 0) {
       abort();
   }
+#endif
+
   return 0;
 }
 
--- ./src/libsodium/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305_try.c.orig	2013-04-23 00:20:37.000000000 +0400
+++ ./src/libsodium/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305_try.c	2013-05-09 18:05:40.132933829 +0400
@@ -131,7 +131,9 @@
 crypto_onetimeauth_pick_best_implementation(void)
 {
     crypto_onetimeauth_poly1305_implementation *implementations[] = {
+#ifdef HAVE_FENV_H
         &crypto_onetimeauth_poly1305_53_implementation,
+#endif
         &crypto_onetimeauth_poly1305_ref_implementation,
         NULL
     };
