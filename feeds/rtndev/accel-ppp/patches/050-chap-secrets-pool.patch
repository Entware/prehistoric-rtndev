--- a/accel-pppd/accel-ppp.conf
+++ b/accel-pppd/accel-ppp.conf
@@ -156,9 +156,9 @@ gw-ip-address=192.168.0.1
 #attr=Cisco-AVPair
 attr=Framed-Pool
 192.168.0.2-255
-192.168.1.1-255,pool1
-192.168.2.1-255,pool2
-192.168.3.1-255,pool3
+192.168.1.1-255,name=pool1
+192.168.2.1-255,name=pool2
+192.168.3.1-255,name=pool3
 192.168.4.0/24
 
 [log]
--- a/accel-pppd/accel-ppp.conf.5
+++ b/accel-pppd/accel-ppp.conf.5
@@ -711,20 +711,20 @@ Specifies single IP address to be used as local address of ppp interfaces.
 .BI "gw=" range
 Specifies range of local address of ppp interfaces if form:
 .br
-.B x.x.x.x/mask[,pool_name]
+.B x.x.x.x/mask[,name=pool_name]
 (for example 10.0.0.0/8)
 .br
-.B x.x.x.x-y[,pool_name]
+.B x.x.x.x-y[,name=pool_name]
 (for example 10.0.0.1-254)
 .TP
 .BI "tunnel=" range
 Specifies range of remote address of ppp interfaces if form:
 .br
-.B x.x.x.x/mask[,pool_name]
+.B x.x.x.x/mask[,name=pool_name]
 .br
-.B x.x.x.x-y[,pool_name]
+.B x.x.x.x-y[,name=pool_name]
 .TP
-.BI "x.x.x.x/mask[,pool_name] or x.x.x.x-y[,pool_name]"
+.BI "x.x.x.x/mask[,name=pool_name] or x.x.x.x-y[,name=pool_name]"
 Also specifies range of remote address of ppp interfaces.
 .TP
 .BI "attr=" attribute
--- a/accel-pppd/extra/chap-secrets.c
+++ b/accel-pppd/extra/chap-secrets.c
@@ -42,6 +42,7 @@ struct cs_pd_t
 	struct ipv4db_item_t ip;
 	char *passwd;
 	char *rate;
+	char *pool;
 };
 
 static LIST_HEAD(hash_chain);
@@ -224,8 +225,12 @@ found:
 	}
 
 	pd->ip.addr = conf_gw_ip_address;
-	if (n >= 3 && ptr[2][0] != '*')
-		pd->ip.peer_addr = inet_addr(ptr[2]);
+	if (n >= 3 && ptr[2][0] != '*') {
+		if (strncmp(ptr[2], "pool=", 5) == 0)
+			pd->pool = _strdup(ptr[2] + 5);
+		else
+			pd->ip.peer_addr = inet_addr(ptr[2]);
+	}
 	pd->ip.mask = conf_netmask;
 	pd->ip.owner = &ipdb;
 
@@ -264,6 +269,8 @@ static void ev_ses_finished(struct ap_session *ses)
 	_free(pd->passwd);
 	if (pd->rate)
 		_free(pd->rate);
+	if (pd->pool)
+		_free(pd->pool);
 	_free(pd);
 }
 
@@ -319,6 +326,14 @@ static char* get_passwd(struct pwdb_t *pwdb, struct ap_session *ses, const char
 	if (!pd)
 		return NULL;
 	
+	if (pd->pool) {
+		struct ev_cs_t ev = {
+			.ses = ses,
+			.val = pd->pool,
+		};
+		triton_event_fire(EV_CS_ACCESS_ACCEPT, &ev);
+	}
+
 	return _strdup(pd->passwd);
 }
 
@@ -655,6 +670,14 @@ static int check_passwd(struct pwdb_t *pwdb, struct ap_session *ses, const char
 	
 	va_end(args);
 
+	if (r == PWDB_SUCCESS && pd->pool) {
+		struct ev_cs_t ev = {
+			.ses = ses,
+			.val = pd->pool,
+		};
+		triton_event_fire(EV_CS_ACCESS_ACCEPT, &ev);
+	}
+
 	return r;
 }
 #endif
--- a/accel-pppd/extra/ippool.c
+++ b/accel-pppd/extra/ippool.c
@@ -392,6 +392,13 @@ static struct backup_module backup_mod = {
 };
 #endif
 
+static void ev_cs_access_accept(struct ev_cs_t *ev)
+{
+	if (ev->ses->ipv4_pool_name)
+		_free(ev->ses->ipv4_pool_name);
+	ev->ses->ipv4_pool_name = _strdup(ev->val);
+}
+
 #ifdef RADIUS
 static int parse_attr(struct ap_session *ses, struct rad_attr_t *attr)
 {
@@ -568,6 +575,9 @@ static void ippool_init2(void)
 	backup_register_module(&backup_mod);
 #endif
 
+	if (triton_module_loaded("chap-secrets"))
+		triton_event_register_handler(EV_CS_ACCESS_ACCEPT, (triton_event_func)ev_cs_access_accept);
+
 #ifdef RADIUS
 	if (triton_module_loaded("radius"))
 		triton_event_register_handler(EV_RADIUS_ACCESS_ACCEPT, (triton_event_func)ev_radius_access_accept);
--- a/accel-pppd/include/events.h
+++ b/accel-pppd/include/events.h
@@ -22,6 +22,7 @@
 #define EV_MPPE_KEYS        102
 #define EV_DNS              103
 #define EV_WINS             104
+#define EV_CS_ACCESS_ACCEPT 150
 #define EV_RADIUS_ACCESS_ACCEPT 200
 #define EV_RADIUS_COA           201
 
@@ -64,4 +65,10 @@ struct ev_wins_t
 	in_addr_t wins1;
 	in_addr_t wins2;
 };
+
+struct ev_cs_t
+{
+	struct ap_session *ses;
+	char *val;
+};
 #endif
